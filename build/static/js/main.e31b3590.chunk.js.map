{"version":3,"sources":["utils/utils.ts","Graph.tsx","SearchHash.tsx","App.js","index.js"],"names":["shortener","hash","slice","lovelacesToAda","lovelaces","displayNodeTooltip","node","mainNode","ingrEgrNode","category","length","name","txValue","unspentTx","fee","blockId","size","displayMainNode","Graph","graphData","onClick","option","tooltip","formatter","a","link","data","source","target","displayLinkTooltip","legend","categories","map","bottom","textStyle","color","animationDuration","animationEasingUpdate","series","type","layout","nodes","links","roam","label","position","lineStyle","curveness","join","cap","miterLimit","emphasis","focus","width","force","zoom","onEvents","click","params","className","style","height","getMainNode","currentTx","tx","value","outSum","Number","show","symbolSize","egressT","some","el","txHashMay","find","addUnspentTx","getMainCategory","getIngressCategory","ingressT","getIngressNodes","txHash","getIngressLinks","symbol","SearchHash","useState","setTxHash","setGraphData","fetchTxWithEgressAndIngress","fetch","then","res","json","tempGraph","ingressNodes","egressNodes","filter","ingressLinks","egressLinks","getEgressLinks","ingressCategory","mainCategory","egressCategory","getEgressCategory","createGraphData","constructNewGraph","currentGraph","currentGraphWithoutNode","displayNewTx","handleSubmit","e","preventDefault","onSubmit","placeholder","onChange","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e31b3590.chunk.js","sourcesContent":["import { IEgressIngressTx } from \"../interfaces/IEgressIngressTx\";\nimport { ITx } from \"../interfaces/ITx\";\n\nexport const shortener = (hash: string): string =>\n  `${hash.slice(0, 3)}...${hash.slice(-3)}`;\n\nexport const lovelacesToAda = (lovelaces: number): string =>\n  `${lovelaces / 1000000} â‚³`;\n\nexport const formatTheLegend = (category: string): string => {\n  if (category.length === 67) {\n    // for Ingress and Egress Category\n    return `${category.slice(0, 3)} ${category.slice(3, 6)}...${category.slice(\n      -3\n    )}`;\n  }\n  // for Main Category\n  return `${category.slice(0, 3)}...${category.slice(-3)}`;\n};\n\nexport const addUnspentTx = (currentTx: ITx): number | undefined =>\n  currentTx.egressT.find((el: IEgressIngressTx) => !el.txHashMay)?.value;\n","import ReactECharts from \"echarts-for-react\";\nimport { INode } from \"./interfaces/INode\";\nimport { IMainNode } from \"./interfaces/IMainNode\";\nimport { ILink } from \"./interfaces/ILink\";\nimport { IGraph } from \"./interfaces/IGraph\";\nimport { formatTheLegend, lovelacesToAda, shortener } from \"./utils/utils\";\n\nconst displayLinkTooltip = (link: ILink): string => {\n  return `${shortener(link.source)} -> ${shortener(link.target)}`;\n};\n\nconst displayMainNode = (mainNode: IMainNode): string => {\n  if (mainNode.unspentTx) {\n    // display mainNode with unspentTx\n    return `Tx Hash: ${shortener(mainNode.name)}<br />Out Sum: ${lovelacesToAda(\n      mainNode.txValue\n    )}<br />Fee: ${lovelacesToAda(mainNode.fee)}<br />BlockId: ${\n      mainNode.blockId\n    }<br />Size: ${mainNode.size}<br />Unspent Tx: ${lovelacesToAda(\n      mainNode.unspentTx\n    )}`;\n  }\n  // display mainNode without unspentTx\n  return `Tx Hash: ${shortener(mainNode.name)}<br />Out Sum: ${lovelacesToAda(\n    mainNode.txValue\n  )}<br />Fee: ${lovelacesToAda(mainNode.fee)}<br />BlockId: ${\n    mainNode.blockId\n  }<br />Size: ${mainNode.size}`;\n};\n\nconst displayNodeTooltip = (node: IMainNode | INode): string => {\n  const mainNode = node as IMainNode;\n  const ingrEgrNode = node as INode;\n\n  if (node.category.length === 67) {\n    return `Tx Hash: ${shortener(\n      ingrEgrNode.name\n    )}<br />TxValue: ${lovelacesToAda(ingrEgrNode.txValue)}`;\n  } else {\n    return displayMainNode(mainNode);\n  }\n};\n\nconst Graph = ({\n  graphData,\n  onClick,\n}: {\n  graphData: IGraph;\n  onClick: (node: IMainNode | INode) => Promise<void>;\n}): JSX.Element => {\n  const option = {\n    tooltip: {\n      formatter: function (a: { data: IMainNode | INode | ILink }): string {\n        const link = a.data as ILink;\n        const node = a.data as IMainNode | INode;\n\n        return link.source && link.target\n          ? displayLinkTooltip(link)\n          : displayNodeTooltip(node);\n      },\n    },\n    legend: [\n      {\n        data: graphData.categories.map(function (a: { name: string }): string {\n          return a.name;\n        }),\n        bottom: \"15\",\n        textStyle: {\n          color: \"#FFFFFF\",\n        },\n        formatter: function (name: string): string {\n          return formatTheLegend(name);\n        },\n      },\n    ],\n    animationDuration: 9000, // TODO: resolve \"choppines\" of animation\n    animationEasingUpdate: \"quadraticIn\",\n    series: [\n      {\n        name: \"Tx Graph\",\n        type: \"graph\",\n        layout: \"force\",\n        data: graphData.nodes,\n        links: graphData.links,\n        categories: graphData.categories,\n        roam: true,\n        label: {\n          position: \"right\",\n          formatter: \"{b}\",\n        },\n        lineStyle: {\n          color: \"source\",\n          curveness: 0.2,\n          join: \"miter\",\n          cap: \"square\",\n          miterLimit: 50,\n        },\n        emphasis: {\n          focus: \"adjacency\",\n          lineStyle: {\n            width: 4,\n          },\n        },\n        force: {\n          // repulsion: 500,\n          // friction: 0.1,\n        },\n        zoom: 3,\n      },\n    ],\n  };\n\n  const onChartClick = (params: { data: INode | IMainNode }): void => {\n    onClick(params.data);\n  };\n\n  const onEvents = {\n    click: onChartClick,\n  };\n\n  return (\n    <ReactECharts\n      className=\"m-auto bg-indigo-900 rounded-lg -mt-8 shadow-2xl opacity-80\"\n      option={option}\n      style={{ height: \"650%\", width: \"90%\" }}\n      onEvents={onEvents}\n    />\n  );\n};\n\nexport default Graph;\n","import { useState } from \"react\";\nimport Graph from \"./Graph\";\nimport { ICategory } from \"./interfaces/ICategory\";\nimport { IEgressIngressTx } from \"./interfaces/IEgressIngressTx\";\nimport { IGraph } from \"./interfaces/IGraph\";\nimport { ILink } from \"./interfaces/ILink\";\nimport { IMainNode } from \"./interfaces/IMainNode\";\nimport { INode } from \"./interfaces/INode\";\nimport { ITx } from \"./interfaces/ITx\";\nimport { addUnspentTx } from \"./utils/utils\";\n\nconst getMainNode = (currentTx: ITx): IMainNode => {\n  let mainNode: IMainNode = {\n    name: currentTx.tx.hash,\n    value: currentTx.tx.hash,\n    hash: currentTx.tx.hash,\n    category: `${currentTx.tx.hash}`,\n    outSum: currentTx.tx.outSum,\n    txValue: Number(currentTx.tx.outSum),\n    size: currentTx.tx.size,\n    fee: currentTx.tx.fee,\n    blockId: currentTx.tx.blockId,\n    label: {\n      show: false,\n    },\n    symbolSize: 10,\n  };\n\n  if (currentTx.egressT.some((el: IEgressIngressTx) => el.txHashMay === null)) {\n    mainNode[\"unspentTx\"] = addUnspentTx(currentTx);\n  }\n\n  return mainNode;\n};\n\nconst getMainCategory = (currentTx: ITx): ICategory => ({\n  name: currentTx.tx.hash,\n});\n\nconst getIngressCategory = (currentTx: ITx): ICategory | false =>\n  currentTx.ingressT.length !== 0 && {\n    name: `Ing${currentTx.tx.hash}`,\n  };\n\nconst getEgressCategory = (currentTx: ITx): ICategory => ({\n  name: `Egr${currentTx.tx.hash}`,\n});\n\nconst getIngressNodes = (currentTx: ITx): INode[] => {\n  return currentTx.ingressT.map(\n    (el: IEgressIngressTx) =>\n      ({\n        name: el.txHash,\n        value: el.txHash,\n        category: `Ing${currentTx.tx.hash}`,\n        txValue: el.value,\n        label: {\n          show: false,\n        },\n        symbolSize: 10,\n      } as INode)\n  );\n};\n\nconst getEgressNodes = (currentTx: ITx): (INode | null | undefined | \"\")[] => {\n  return currentTx.egressT\n    .filter((el: IEgressIngressTx) => !!el.txHashMay)\n    .map(\n      (el: IEgressIngressTx) =>\n        el.txHashMay &&\n        ({\n          name: `Egr${el.txHashMay}`, // TODO: to be changed to egress tx and not this string literal after backend update\n          value: el.txHashMay,\n          category: `Egr${currentTx.tx.hash}`,\n          txValue: el.value,\n          label: {\n            show: false,\n          },\n          symbolSize: 10,\n        } as INode)\n    );\n};\n\nconst getIngressLinks = (currentTx: ITx): ILink[] => {\n  return currentTx.ingressT.map(\n    (el: IEgressIngressTx) =>\n      ({\n        source: `${el.txHash}`,\n        target: `${currentTx.tx.hash}`,\n        symbol: [\"none\", \"arrow\"],\n      } as ILink)\n  );\n};\n\nconst getEgressLinks = (currentTx: ITx): (ILink | null | undefined | \"\")[] => {\n  return currentTx.egressT\n    .filter((el: IEgressIngressTx) => !!el.txHashMay) // filtering for unspent egress tx that are shown in the main node\n    .map(\n      (el: IEgressIngressTx) =>\n        el.txHashMay &&\n        ({\n          source: `${currentTx.tx.hash}`,\n          target: `Egr${el.txHashMay}`,\n          symbol: [\"none\", \"arrow\"],\n        } as ILink)\n    );\n};\n\nconst createGraphData = (tx: ITx): IGraph => {\n  // nodes\n  const ingressNodes = getIngressNodes(tx);\n  const mainNode = getMainNode(tx);\n  const egressNodes = getEgressNodes(tx);\n\n  //links\n  const ingressLinks = getIngressLinks(tx);\n  const egressLinks = getEgressLinks(tx);\n\n  // categories\n  const ingressCategory = getIngressCategory(tx);\n  const mainCategory = getMainCategory(tx);\n  const egressCategory = getEgressCategory(tx);\n\n  return {\n    categories: [ingressCategory, mainCategory, egressCategory],\n    links: [...egressLinks, ...ingressLinks],\n    nodes: [...ingressNodes, mainNode, ...egressNodes],\n    type: \"force\",\n  } as IGraph;\n};\n\nconst SearchHash = (): JSX.Element => {\n  const [txHash, setTxHash] = useState(\"\");\n  const [graphData, setGraphData] = useState({\n    type: \"force\",\n    categories: [],\n    nodes: [],\n    links: [],\n  } as IGraph);\n\n  const fetchTxWithEgressAndIngress = (hash: string) => {\n    fetch(`http://localhost:8000/transactions?hash=${hash}`)\n      .then((res) => res.json())\n      .then((data) => {\n        let tx = data.filter((el: any) => el.tx.hash === hash)[0];\n\n        const tempGraph = createGraphData(tx);\n        setGraphData(tempGraph);\n      });\n  };\n\n  const constructNewGraph = (hash: string) => {\n    fetch(`http://localhost:8000/transactions?hash=${hash}`)\n      .then((res) => res.json())\n      .then((data) => {\n        let currentGraph = { ...graphData };\n\n        let tx = data.filter((el: any) => el.tx.hash === hash)[0];\n\n        const ingressNodes = getIngressNodes(tx);\n        const mainNode = getMainNode(tx);\n\n        const ingressLinks = getIngressLinks(tx);\n\n        const ingressCategory = getIngressCategory(tx);\n        const mainCategory = getMainCategory(tx);\n\n        // all the nodes in the current graph without the last node that has been searched for\n        const currentGraphWithoutNode: INode[] = currentGraph.nodes.filter(\n          (el: INode) => el.name !== tx.tx.hash\n        );\n\n        currentGraph.nodes = [\n          ...currentGraphWithoutNode,\n          mainNode,\n          ...ingressNodes,\n        ] as INode[] | IMainNode[];\n\n        currentGraph.categories = [\n          ...currentGraph.categories,\n          ingressCategory,\n          mainCategory,\n        ] as ICategory[];\n\n        currentGraph.links = [\n          ...currentGraph.links,\n          ...ingressLinks,\n        ] as ILink[];\n\n        setGraphData(currentGraph);\n      });\n  };\n\n  const displayNewTx = async (node: INode): Promise<void> => {\n    if (node.category !== node.value) {\n      // check that a main node has not been clicked\n      constructNewGraph(node.value);\n    }\n  };\n\n  const handleSubmit = async (e: React.SyntheticEvent): Promise<void> => {\n    e.preventDefault();\n\n    const target = e.target as typeof e.target & [{ value: string }];\n    setTxHash(target[0].value);\n\n    fetchTxWithEgressAndIngress(txHash);\n  };\n\n  return (\n    <section className=\"flex flex-col\">\n      <div className=\"flex justify-center mt-8\">\n        <form\n          className=\"flex justify-center rounded-lg bg-indigo-100 shadow-2xl p-5 w-5/12 relative z-10\"\n          onSubmit={handleSubmit}\n        >\n          <input\n            className=\"border-indigo-300 border-b-2 rounded-lg text-indigo-900 flex-grow pl-5 p-2 text-sm\n                      focus:outline-none focus:border-indigo-600 shadow-xl truncate overflow-clip\"\n            type=\"text\"\n            value={txHash}\n            placeholder=\"Transaction Hash\"\n            onChange={(e) => setTxHash(e.target.value)}\n          />\n          <button className=\"bg-indigo-600 w-24 rounded-lg ml-5 border-indigo-300 text-gray-100 shadow-2xl\">\n            Search\n          </button>\n        </form>\n      </div>\n      {graphData.nodes.length !== 0 && (\n        <Graph graphData={graphData} onClick={displayNewTx} />\n      )}\n    </section>\n  );\n};\n\nexport default SearchHash;\n","import SearchHash from \"./SearchHash\";\n\nexport default function App() {\n  return (\n    <div className=\"relative bg-gradient-to-br from-indigo-800 via-purple-800 to-purple-700 h-screen overflow-hidden\">\n      <div className=\"text-center pt-10 text-gray-100 text-4xl\">\n        Mimir - The Visual Cardano Explorer\n      </div>\n      <div className=\"flex justify-center text-center pt-6 text-gray-100 text-xl font-extralight\">\n        <span className=\"w-2/4\">\n          Search by <strong>Transaction Hash</strong>\n          {/* or{\" \"} <strong>Address</strong> */}\n        </span>\n      </div>\n\n      {/* right bubbles */}\n      <div className=\"absolute animate-pulse bg-purple-600 opacity-20 rounded-full w-80 h-80 -top-14 left-36\" />\n      <div className=\"absolute animate-pulse bg-pink-600 opacity-10 rounded-full w-48 h-48 left-9\" />\n      <div className=\"absolute animate-pulse bg-pink-200 opacity-20 rounded-full w-56 h-56 -bottom-2 -left-9\" />\n      <div className=\"absolute animate-pulse bg-indigo-200 opacity-20 rounded-full w-40 h-40 -bottom-16 left-28\" />\n\n      {/* left bubbles */}\n      <div className=\"absolute animate-pulse bg-indigo-200 opacity-20 rounded-full w-28 h-28 -top-10 right-1/3\" />\n      <div className=\"absolute animate-pulse bg-pink-200 opacity-20 rounded-full w-32 h-32 top-4 right-36\" />\n      <div className=\"absolute animate-pulse bg-purple-600 opacity-20 rounded-full w-52 h-52 top-36 right-14\" />\n      <div className=\"absolute animate-pulse bg-pink-500 opacity-10 rounded-full w-44 h-44 top-24 right-48\" />\n      <div className=\"absolute animate-pulse bg-pink-200 opacity-20 rounded-full w-24 h-24 bottom-64 -right-12\" />\n      <div className=\"absolute animate-pulse bg-purple-600 opacity-50 rounded-full w-80 h-80 -bottom-8 -right-36\" />\n\n      <SearchHash />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}